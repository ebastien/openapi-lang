//
// Created by intellij-pest on 2021-10-16
// grammar.pest
// Author: ebastien
//

http_status_category = @{ '1'..'5' }
http_status_range = @{ http_status_category ~ "XX" }
http_status_code = @{ http_status_category ~ ASCII_DIGIT{2} }
http_status = @{ http_status_range | http_status_code }

ident_char = @{ ASCII_ALPHANUMERIC | "$" | "-" | "_" }
val_ident = @{ !reserved_keyword ~ ASCII_ALPHA ~ ident_char* }
ref_ident = @{ "@" ~ ident_char* }

keyname_char = @{ ASCII_ALPHANUMERIC | "@" | "$" | "-" | "_" }
keyname = @{ keyname_char* }

let_kw = @{ "let"  ~ !ASCII_ALPHANUMERIC }
res_kw = @{ "res"  ~ !ASCII_ALPHANUMERIC }
use_kw = @{ "use"  ~ !ASCII_ALPHANUMERIC }

stmt_kw = { let_kw | res_kw | use_kw }

num_kw  = @{ "num"  ~ !ASCII_ALPHANUMERIC }
str_kw  = @{ "str"  ~ !ASCII_ALPHANUMERIC }
uri_kw  = @{ "uri"  ~ !ASCII_ALPHANUMERIC }
bool_kw = @{ "bool" ~ !ASCII_ALPHANUMERIC }
int_kw  = @{ "int"  ~ !ASCII_ALPHANUMERIC }

type_kw = { num_kw | str_kw | uri_kw | bool_kw | int_kw }

get_kw     = @{ "get"     ~ !ASCII_ALPHANUMERIC }
put_kw     = @{ "put"     ~ !ASCII_ALPHANUMERIC }
post_kw    = @{ "post"    ~ !ASCII_ALPHANUMERIC }
patch_kw   = @{ "patch"   ~ !ASCII_ALPHANUMERIC }
delete_kw  = @{ "delete"  ~ !ASCII_ALPHANUMERIC }
options_kw = @{ "options" ~ !ASCII_ALPHANUMERIC }
head_kw    = @{ "head"    ~ !ASCII_ALPHANUMERIC }

method_kw = { get_kw | put_kw | post_kw | patch_kw | delete_kw | options_kw | head_kw }

media_kw   = @{ "media"   ~ !ASCII_ALPHANUMERIC }
headers_kw = @{ "headers" ~ !ASCII_ALPHANUMERIC }
status_kw  = @{ "status"  ~ !ASCII_ALPHANUMERIC }

content_kw = { media_kw | headers_kw | status_kw }

reserved_keyword = { stmt_kw | type_kw }

literal_num = @{ ASCII_DIGIT+ }

literal_str_char = _{ !"\"" ~ ANY }
literal_str_inner = @{ literal_str_char* }
literal_str = ${ "\"" ~ literal_str_inner ~ "\"" }

literal_type = { http_status_range | literal_num | literal_str }

var = { ref_ident | val_ident }

uri_char = @{ ASCII_ALPHANUMERIC | "-" | "." | "_" | "~" | "%" }
uri_literal = @{ uri_char+ }
uri_var = { "{" ~ expr_type ~ "}" }
uri_path = { ( "/" ~ ( uri_literal | uri_var ) )+ }
uri_params = { ( "?" ~ object_type )? }
uri_template = { uri_path ~ "/"? ~ uri_params }
uri_root = @{ "/" }

uri_type = { uri_kw | uri_template | uri_root }

prim_type = { num_kw | str_kw | bool_kw | int_kw }

prop_name = ${ "'" ~ keyname }
prop_type = { prop_name ~ term_type }

object_type = { "{" ~ ( expr_type ~ ( "," ~ expr_type )* )? ~ "}" }

array_type = { "[" ~ expr_type ~ "]" }

paren_type = { "(" ~ expr_type ~ ")" }

content_prop = { content_kw ~ "=" ~ term_type }
content_type = { "<" ~ ( content_prop ~ "," )* ~ expr_type? ~ ">" }

term_type = {
  (  literal_type
  |  prim_type
  |  uri_type
  |  array_type
  |  prop_type
  |  object_type
  |  content_type
  |  paren_type
  |  var
  ) ~ inline_ann?
}

apply = { val_ident ~ term_type+ }
app_type = { apply | term_type }

range_type = { app_type ~ ( "::" ~ app_type )* }

join_type = { range_type ~ ( "&" ~ range_type )* }

any_type = { join_type ~ ( "~" ~ join_type )* }

sum_type = { any_type ~ ( "|" ~ any_type )* }

methods = { method_kw ~ ( "," ~ method_kw )* }
domain = { ( ":" ~ term_type )? }
xfer_params = { object_type? }
xfer = { methods ~ xfer_params ~ domain ~ "->" ~ range_type }

xfer_type = { xfer | sum_type }

rel_type = { term_type ~ "(" ~ xfer_type ~ ( "," ~ xfer_type )* ~ ")" }

expr_type = { rel_type | xfer_type }

binding = { val_ident }
bindings = { binding* }
decl = { let_kw ~ ( ref_ident | val_ident ~ bindings ) ~ "=" ~ expr_type ~ ";" }

res = { res_kw ~ expr_type ~ ";" }

line = @{ ( !NEWLINE ~ ANY )* }
ann = ${ "#" ~ line }

inline_ann_body = @{ ( !"`" ~ ANY )* }
inline_ann = ${ "`" ~ inline_ann_body ~ "`" }

string_lit_body = @{ ( !"\"" ~ ANY )* }
string_lit = ${ "\"" ~ string_lit_body ~ "\"" }
import = { use_kw ~ string_lit ~ ";" }

stmt = { ann | decl | res | import }

program = { SOI ~ stmt* ~ EOI }

block_comment = _{ "/*" ~ ( block_comment | !"*/" ~ ANY )* ~ "*/" }
line_comment = _{ "//" ~ line }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ line_comment | block_comment }
